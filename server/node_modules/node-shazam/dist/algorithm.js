import { ComplexNumber, fft } from './fft.js';
import { DecodedMessage, FrequencyBand, FrequencyPeak } from './signatures.js';
const hanning = (m) => Array(m)
    .fill(0)
    .map((_, n) => 0.5 - 0.5 * Math.cos((2 * Math.PI * n) / (m - 1)));
const pyMod = (a, b) => (a % b) >= 0 ? (a % b) : b + (a % b);
const HANNING_MATRIX = hanning(2050).slice(1, 2049);
export class RingBuffer {
    constructor(bufferSize, defaultValue) {
        this.bufferSize = bufferSize;
        this.position = 0;
        this.written = 0;
        if (typeof defaultValue === 'function') {
            this.list = Array(bufferSize).fill(null).map(defaultValue);
        }
        else {
            this.list = Array(bufferSize).fill(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);
        }
    }
    append(value) {
        this.list[this.position] = value;
        this.position++;
        this.written++;
        this.position %= this.bufferSize;
    }
}
export class SignatureGenerator {
    initFields() {
        this.ringBufferOfSamples = new RingBuffer(2048, 0);
        this.fftOutputs = new RingBuffer(256, () => new Float64Array(Array(1025).fill(0)));
        this.spreadFFTsOutput = new RingBuffer(256, () => new Float64Array(Array(1025).fill(0)));
        this.nextSignature = new DecodedMessage();
        this.nextSignature.sampleRateHz = 16000;
        this.nextSignature.numberSamples = 0;
        this.nextSignature.frequencyBandToSoundPeaks = {};
    }
    constructor() {
        this.inputPendingProcessing = [];
        this.samplesProcessed = 0;
        this.initFields();
    }
    feedInput(s16leMonoSamples) {
        this.inputPendingProcessing = this.inputPendingProcessing.concat(s16leMonoSamples);
    }
    getNextSignature() {
        if (this.inputPendingProcessing.length - this.samplesProcessed < 128) {
            return null;
        }
        this.processInput(this.inputPendingProcessing);
        this.samplesProcessed += this.inputPendingProcessing.length;
        const returnedSignature = this.nextSignature;
        this.initFields();
        return returnedSignature;
    }
    processInput(s16leMonoSamples) {
        this.nextSignature.numberSamples += s16leMonoSamples.length;
        for (let positionOfChunk = 0; positionOfChunk < s16leMonoSamples.length; positionOfChunk += 128) {
            this.doFFT(s16leMonoSamples.slice(positionOfChunk, positionOfChunk + 128));
            this.doPeakSpreading();
            if (this.spreadFFTsOutput.written >= 46) {
                this.doPeakRecognition();
            }
        }
    }
    doFFT(batchOf128S16leMonoSamples) {
        this.ringBufferOfSamples.list.splice(this.ringBufferOfSamples.position, batchOf128S16leMonoSamples.length, ...batchOf128S16leMonoSamples);
        this.ringBufferOfSamples.position += batchOf128S16leMonoSamples.length;
        this.ringBufferOfSamples.position %= 2048;
        this.ringBufferOfSamples.written += batchOf128S16leMonoSamples.length;
        const excerptFromRingBuffer = [
            ...this.ringBufferOfSamples.list.slice(this.ringBufferOfSamples.position),
            ...this.ringBufferOfSamples.list.slice(0, this.ringBufferOfSamples.position),
        ];
        // The premultiplication of the array is for applying a windowing function before the DFT (slighty rounded Hanning without zeros at edges)
        const results = fft(excerptFromRingBuffer.map((v, i) => (new ComplexNumber(v * HANNING_MATRIX[i], 0))))
            .map((e) => (e.imag * e.imag + e.real * e.real) / (1 << 17))
            .map((e) => e < 0.0000000001 ? 0.0000000001 : e).slice(0, 1025);
        if (results.length != 1025) {
            console.log('ASSERT FAILED!');
        }
        this.fftOutputs.append(new Float64Array(results));
    }
    doPeakSpreading() {
        const originLastFFT = this.fftOutputs.list[pyMod(this.fftOutputs.position - 1, this.fftOutputs.bufferSize)], spreadLastFFT = new Float64Array(originLastFFT);
        for (let position = 0; position < 1025; position++) {
            if (position < 1023) {
                spreadLastFFT[position] = Math.max(...spreadLastFFT.slice(position, position + 3));
            }
            let maxValue = spreadLastFFT[position];
            for (const formerFftNum of [-1, -3, -6]) {
                const formerFftOutput = this.spreadFFTsOutput.list[pyMod(this.spreadFFTsOutput.position + formerFftNum, this.spreadFFTsOutput.bufferSize)];
                if (isNaN(formerFftOutput[position]))
                    continue;
                formerFftOutput[position] = maxValue = Math.max(formerFftOutput[position], maxValue);
            }
        }
        this.spreadFFTsOutput.append(spreadLastFFT);
    }
    doPeakRecognition() {
        const fftMinus46 = this.fftOutputs.list[pyMod(this.fftOutputs.position - 46, this.fftOutputs.bufferSize)];
        const fftMinus49 = this.spreadFFTsOutput.list[pyMod(this.spreadFFTsOutput.position - 49, this.spreadFFTsOutput.bufferSize)];
        const range = (a, b, c = 1) => {
            const out = [];
            for (let i = a; i < b; i += c)
                out.push(i);
            return out;
        };
        for (let binPosition = 10; binPosition < 1015; binPosition++) {
            // Ensire that the bin is large enough to be a peak
            if ((fftMinus46[binPosition] >= 1 / 64) && (fftMinus46[binPosition] >= fftMinus49[binPosition - 1])) {
                let maxNeighborInFftMinus49 = 0;
                for (const neighborOffset of [...range(-10, -3, 3), -3, 1, ...range(2, 9, 3)]) {
                    const candidate = fftMinus49[binPosition + neighborOffset];
                    if (isNaN(candidate))
                        continue;
                    maxNeighborInFftMinus49 = Math.max(candidate, maxNeighborInFftMinus49);
                }
                if (fftMinus46[binPosition] > maxNeighborInFftMinus49) {
                    let maxNeighborInOtherAdjacentFFTs = maxNeighborInFftMinus49;
                    for (const otherOffset of [-53, -45, ...range(165, 201, 7), ...range(214, 250, 7)]) {
                        const candidate = this.spreadFFTsOutput.list[pyMod(this.spreadFFTsOutput.position + otherOffset, this.spreadFFTsOutput.bufferSize)][binPosition - 1];
                        if (isNaN(candidate))
                            continue;
                        maxNeighborInOtherAdjacentFFTs = Math.max(candidate, maxNeighborInOtherAdjacentFFTs);
                    }
                    if (fftMinus46[binPosition] > maxNeighborInOtherAdjacentFFTs) {
                        // This is a peak. Store the peak
                        const fftNumber = this.spreadFFTsOutput.written - 46;
                        const peakMagnitude = Math.log(Math.max(1 / 64, fftMinus46[binPosition])) * 1477.3 + 6144, peakMagnitudeBefore = Math.log(Math.max(1 / 64, fftMinus46[binPosition - 1])) * 1477.3 + 6144, peakMagnitudeAfter = Math.log(Math.max(1 / 64, fftMinus46[binPosition + 1])) * 1477.3 + 6144;
                        const peakVariation1 = peakMagnitude * 2 - peakMagnitudeBefore - peakMagnitudeAfter, peakVariation2 = (peakMagnitudeAfter - peakMagnitudeBefore) * 32 / peakVariation1;
                        const correctedPeakFrequencyBin = binPosition * 64 + peakVariation2;
                        if (peakVariation1 <= 0) {
                            console.log('Assert 2 failed - ' + peakVariation1);
                        }
                        const frequencyHz = correctedPeakFrequencyBin * (16000 / 2 / 1024 / 64);
                        let band;
                        if (frequencyHz < 250) {
                            continue;
                        }
                        else if (frequencyHz <= 520) {
                            band = FrequencyBand._250_520;
                        }
                        else if (frequencyHz <= 1450) {
                            band = FrequencyBand._520_1450;
                        }
                        else if (frequencyHz <= 3500) {
                            band = FrequencyBand._1450_3500;
                        }
                        else if (frequencyHz <= 5500) {
                            band = FrequencyBand._3500_5500;
                        }
                        else
                            continue;
                        if (!Object.keys(this.nextSignature.frequencyBandToSoundPeaks).includes(FrequencyBand[band])) {
                            this.nextSignature.frequencyBandToSoundPeaks[FrequencyBand[band]] = [];
                        }
                        this.nextSignature.frequencyBandToSoundPeaks[FrequencyBand[band]].push(new FrequencyPeak(fftNumber, Math.round(peakMagnitude), Math.round(correctedPeakFrequencyBin), 16000));
                    }
                }
            }
        }
    }
}
